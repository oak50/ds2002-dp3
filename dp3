#!/usr/bin/python3
import boto3
from botocore.exceptions import ClientError

# Set up your SQS queue URL and boto3 client
url = "https://sqs.us-east-1.amazonaws.com/440848399208/fpt9nh"
sqs = boto3.client('sqs')

def delete_messages(handles):
    try:
        for handle in handles:
            # Delete message from SQS queue
            sqs.delete_message(
                QueueUrl=url,
                ReceiptHandle=handle
            )
            print("Message deleted")
    except ClientError as e:
        print(e.response['Error']['Message'])

def get_messages():
    for i in range(10):
        try:
        # Receive up to 10 messages from SQS queue
        
            response = sqs.receive_message(
                QueueUrl=url,
                AttributeNames=[
                    'All'
            ],
                MaxNumberOfMessages=1,
                MessageAttributeNames=[
                    'All'
            ]
        )
        
        # create dictionary, which we'll use to match order attributes with their correpsonding words
            word_order_dict = {}

        # Check if there are messages in the response
            if "Messages" in response:
                # take message attributes
                order = response['Messages'][0]['MessageAttributes']['order']['StringValue']
                word = response['Messages'][0]['MessageAtrributes']['word']['StringValue']
                handle = response['Messages'][0]['ReceiptHandle']
                print(f"Order: {order}")
                print(f"Word: {word}")
                
                word_order_dict[order] = word # populate the dictionary. for each order #, match with word
                delete_message(handle) # delete handle

            else:
                print("No message in the queue")
                exit(1)
            
        except ClientError as e: 
            print(e.response['Error']['Message'])

        # order the dictionary using order keys. Put into order list
            orders = sorted(word_order_dict.keys(), key=lambda x: word_order_dict[x])

        # join "order" to make sentence
            sentence = ' '.join(orders)
            print(sentence)

# Trigger the function
if __name__ == "__main__":
    get_messages()

# had issues with the delete_messages() function, which appeared to permanently delete all messages
# in the queue. Went to office hours and was unable to resolve. Was still able to get the phrase from previous attempts.